/*
Copyright 2019 JD Cloud

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-local-volume/kubernetes-local-volume/pkg/apis/storage/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeLocalVolumeStorageLister helps list NodeLocalVolumeStorages.
type NodeLocalVolumeStorageLister interface {
	// List lists all NodeLocalVolumeStorages in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NodeLocalVolumeStorage, err error)
	// NodeLocalVolumeStorages returns an object that can list and get NodeLocalVolumeStorages.
	NodeLocalVolumeStorages(namespace string) NodeLocalVolumeStorageNamespaceLister
	NodeLocalVolumeStorageListerExpansion
}

// nodeLocalVolumeStorageLister implements the NodeLocalVolumeStorageLister interface.
type nodeLocalVolumeStorageLister struct {
	indexer cache.Indexer
}

// NewNodeLocalVolumeStorageLister returns a new NodeLocalVolumeStorageLister.
func NewNodeLocalVolumeStorageLister(indexer cache.Indexer) NodeLocalVolumeStorageLister {
	return &nodeLocalVolumeStorageLister{indexer: indexer}
}

// List lists all NodeLocalVolumeStorages in the indexer.
func (s *nodeLocalVolumeStorageLister) List(selector labels.Selector) (ret []*v1alpha1.NodeLocalVolumeStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeLocalVolumeStorage))
	})
	return ret, err
}

// NodeLocalVolumeStorages returns an object that can list and get NodeLocalVolumeStorages.
func (s *nodeLocalVolumeStorageLister) NodeLocalVolumeStorages(namespace string) NodeLocalVolumeStorageNamespaceLister {
	return nodeLocalVolumeStorageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeLocalVolumeStorageNamespaceLister helps list and get NodeLocalVolumeStorages.
type NodeLocalVolumeStorageNamespaceLister interface {
	// List lists all NodeLocalVolumeStorages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NodeLocalVolumeStorage, err error)
	// Get retrieves the NodeLocalVolumeStorage from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NodeLocalVolumeStorage, error)
	NodeLocalVolumeStorageNamespaceListerExpansion
}

// nodeLocalVolumeStorageNamespaceLister implements the NodeLocalVolumeStorageNamespaceLister
// interface.
type nodeLocalVolumeStorageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeLocalVolumeStorages in the indexer for a given namespace.
func (s nodeLocalVolumeStorageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeLocalVolumeStorage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeLocalVolumeStorage))
	})
	return ret, err
}

// Get retrieves the NodeLocalVolumeStorage from the indexer for a given namespace and name.
func (s nodeLocalVolumeStorageNamespaceLister) Get(name string) (*v1alpha1.NodeLocalVolumeStorage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodelocalvolumestorage"), name)
	}
	return obj.(*v1alpha1.NodeLocalVolumeStorage), nil
}
